package fr.xpdustry.distributor.command.param.string;import fr.xpdustry.distributor.command.param.*;import fr.xpdustry.distributor.exception.*;import java.util.*;import java.util.regex.*;public class StringParameter extends CommandParameter<String>{    private Pattern regex = null;    public StringParameter(String name, String defaultValue, boolean optional){        super(name, defaultValue, optional, String.class, ArgumentPreprocessor.RAW_ARG);    }    public StringParameter(String name, String defaultValue, boolean optional, ArgumentPreprocessor<String> parser){        super(name, defaultValue, optional, String.class, parser);    }    @Override    public String parse(String arg) throws ParsingException{        String string = super.parse(arg);        if(regex == null || regex.matcher(arg).matches()){            return string;        }else{            throw new ParsingException(ParsingExceptionType.PATTERN_ERROR)            .with("expected", regex)            .with("arg", arg);        }    }    public Pattern getRegex(){        return regex;    }    public StringParameter withRegex(String regex){        Objects.requireNonNull(regex, "The pattern is null.");        this.regex = Pattern.compile(regex);        return this;    }    public StringParameter withRegex(String regex, int flags){        Objects.requireNonNull(regex, "The pattern is null.");        this.regex = Pattern.compile(regex, flags);        return this;    }}