package fr.xpdustry.distributor.command.param.string;import arc.util.*;import fr.xpdustry.distributor.command.param.*;import fr.xpdustry.distributor.exception.*;import io.leangen.geantyref.*;import java.util.regex.*;public class StringParameter extends CommandParameter<String>{    private final @Nullable Pattern regex;    public StringParameter(String name, String defaultValue, boolean optional, ArgumentPreprocessor<String> parser, Pattern regex){        super(name, defaultValue, optional, TypeToken.get(String.class), parser);        this.regex = regex;    }    public StringParameter(String name, String defaultValue, boolean optional, ArgumentPreprocessor<String> parser){        this(name, defaultValue, optional, parser, null);    }    public StringParameter(String name, String defaultValue, boolean optional){        this(name, defaultValue, optional, ArgumentPreprocessor.RAW, null);    }    public StringParameter(String name, String defaultValue, boolean optional, Pattern regex){        this(name, defaultValue, optional, ArgumentPreprocessor.RAW, regex);    }    @Override    public String parse(String arg) throws ParsingException{        String string = super.parse(arg);        if(!hasRegex() || regex.matcher(arg).matches()){            return string;        }else{            throw new ParsingException(ParsingExceptionType.PATTERN_ERROR)                .with("expected", regex)                .with("arg", arg);        }    }    public Pattern getRegex(){        return regex;    }    public boolean hasRegex(){        return regex != null;    }}