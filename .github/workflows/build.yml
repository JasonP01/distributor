# TODO A more convenient ci is required...

name: Build

on: [ push, pull_request ]

jobs:
  build:
    # Only run on PRs if the source branch is on someone else's repo
    if: ${{ github.event_name != 'pull_request' || github.repository != github.event.pull_request.head.repo.full_name }}

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'temurin'

      - uses: gradle/wrapper-validation-action@v1

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build artifact
        id: build
        run: |
          ./gradlew build
          echo '::set-output name=CORE_ARTIFACT_PATH::'$(./gradlew :distributor-core:getArtifactPath -q)
      #   echo '::set-output name=JS_ARTIFACT_PATH::'$(./gradlew :distributor-js:getArtifactPath -q)

      - name: Publish to Xpdustry
        if: ${{ github.event_name != 'pull_request' }}
        run: ./gradlew publish
        env:
          ORG_GRADLE_PROJECT_xpdustryUsername: "${{ secrets.XPDUSTRY_REPO_USERNAME }}"
          ORG_GRADLE_PROJECT_xpdustryPassword: "${{ secrets.XPDUSTRY_REPO_PASSWORD }}"
          ORG_GRADLE_PROJECT_signingKey: "${{ secrets.XPDUSTRY_SIGNING_KEY }}"
          ORG_GRADLE_PROJECT_signingPassword: "${{ secrets.XPDUSTRY_SIGNING_PASSWORD }}"

      - name: Determine Status
        run: |
          if [ "$(./gradlew properties | awk '/^version:/ { print $2; }' | grep '\-SNAPSHOT')" ]; then
            echo "STATUS=snapshot" >> $GITHUB_ENV
          else
            echo "STATUS=release" >> $GITHUB_ENV
          fi

      # - name: Set up Release
      #   if: "${{ env.STATUS == 'release' }}"
      #   id: release
      #   run: |
      #     tag=$(cat global-plugin.json | grep "version*")   # Cut the line with the version in plugin.json
      #     tag=$(echo $tag | cut -d ":" -f 2,3)              # Split with ":" and take the version number
      #     tag=$(echo $tag | tr -d \"," ")                   # Trim the " and , and spaces
      #     echo '::set-output name=RELEASE_TAG::'$tag
      #
      #     r=$(cat CHANGELOG.md)
      #     r="${r//'%'/'%25'}"                               # Multiline escape sequences for %
      #     r="${r//$'\n'/'%0A'}"                             # Multiline escape sequences for '\n'
      #     r="${r//$'\r'/'%0D'}"                             # Multiline escape sequences for '\r'
      #     echo "::set-output name=CHANGELOG::$r"

      - name: Upload core artifact to Release
        if: "${{ env.STATUS == 'release' }}"
        uses: svenstaro/upload-release-action@v2
        with:
          release_name: v${{ steps.release.outputs.RELEASE_TAG }} release
          body: ${{ steps.release.outputs.CHANGELOG }}

          repo_token: ${{ secrets.GITHUB_TOKEN }}
          asset_name: distributor-core.jar
          tag: v${{ steps.release.outputs.RELEASE_TAG }}
          file: ${{ steps.build.outputs.CORE_ARTIFACT_PATH }}

      # - name: Upload core artifact to Release
      #   if: "${{ env.STATUS == 'release' }}"
      #   uses: svenstaro/upload-release-action@v2
      #   with:
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     asset_name: distributor-js.jar
      #     tag: v${{ steps.release.outputs.RELEASE_TAG }}
      #     file: ${{ steps.build.outputs.JS_ARTIFACT_PATH }}

      - name: Upload core artifact to Actions
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}
          path: ${{ steps.build.outputs.CORE_ARTIFACT_PATH }}

      # - name: Upload js artifact to Actions
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: ${{ github.event.repository.name }}
      #     path: ${{ steps.build.outputs.JS_ARTIFACT_PATH }}
