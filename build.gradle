import groovy.json.JsonSlurper
import groovy.json.JsonBuilder
import org.apache.groovy.json.internal.LazyMap
import java.nio.charset.StandardCharsets
import net.ltgt.gradle.errorprone.CheckSeverity


buildscript{
    repositories{
        mavenCentral()
    }

    dependencies{
        classpath "org.codehaus.groovy:groovy-json:3.0.8" // <- For JsonSlurper syntax highlighting
    }
}

plugins{
    id "net.ltgt.errorprone" version "2.0.2"
    id "com.github.johnrengelman.shadow" version "7.1.2"
}


ext{
    serverDirectoryPath = System.getenv("MINDUSTRY_SERVER_HOME")
    shared = new JsonSlurper().parseText(file("$rootDir/plugin.json").text) as LazyMap

    versions = [
            "mindustry": property("props.mindustry-version"),
            "arc": property("props.arc-version"),
            "junit": "5.8.2"
    ]
}

task runServer{
    doLast{
        javaexec{
            workingDir = serverDirectoryPath
            classpath = files("$serverDirectoryPath/server.jar")
            mainClass = "mindustry.server.ServerLauncher"
            standardInput = System.in
        }
    }
}


allprojects{
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: "net.ltgt.errorprone"
    apply plugin: "com.github.johnrengelman.shadow"

    group property("props.project-group")
    version shared.version

    repositories{
        mavenCentral()
        maven{ url "https://www.jitpack.io" }
    }

    dependencies{
        // Mindustry
        compileOnly "com.github.Anuken.Arc:arc-core:${versions.arc}"
        compileOnly "com.github.Anuken.Arc:backend-headless:${versions.arc}"
        compileOnly "com.github.Anuken.Mindustry:core:${versions.mindustry}"
        compileOnly "com.github.Anuken.Mindustry:server:${versions.mindustry}"

        // Unit Testing
        testImplementation "com.github.Anuken.Arc:arc-core:${versions.arc}"
        testImplementation "com.github.Anuken.Arc:backend-headless:${versions.arc}"
        testImplementation "com.github.Anuken.Mindustry:core:${versions.mindustry}"
        testImplementation "com.github.Anuken.Mindustry:server:${versions.mindustry}"

        testImplementation "org.junit.jupiter:junit-jupiter-params:${versions.junit}"
        testImplementation "org.junit.jupiter:junit-jupiter-api:${versions.junit}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"

        // Annotations
        compileOnly 'org.checkerframework:checker-qual:3.21.0'
        annotationProcessor "com.uber.nullaway:nullaway:0.9.4"
        errorprone "com.google.errorprone:error_prone_core:2.10.0"
        errorproneJavac "com.google.errorprone:javac:9+181-r4173-1"
    }

    java{
        withSourcesJar()
        withJavadocJar()
    }

    test{
        useJUnitPlatform()
    }

    build{
        dependsOn shadowJar
    }

    tasks.withType(JavaCompile).configureEach {
        sourceCompatibility = JavaVersion.VERSION_16
        targetCompatibility = JavaVersion.VERSION_16
        options.encoding = StandardCharsets.UTF_8

        options.errorprone.with{
            disableWarningsInGeneratedCode = true
            disable "MissingSummary"
            if(!name.containsIgnoreCase("test")){
                check("NullAway", CheckSeverity.ERROR)
                option("NullAway:AnnotatedPackages", "fr.xpdustry.distributor")
            }
        }
    }
}


subprojects{
    ext{
        metadata = new JsonSlurper().parseText(file("$projectDir/plugin.json").text)
    }

    shadowJar{
        def file = new File("${getTemporaryDir().path}/plugin.json")
        file.write(new JsonBuilder(metadata + shared).toPrettyString(), StandardCharsets.UTF_8.name())
        from file
    }

    task moveJar(dependsOn: shadowJar){
        doLast{
            delete file("$serverDirectoryPath/config/mods").listFiles({
                it.isFile() && it.name.endsWith(".jar") && it.name.startsWith((String) shadowJar.archiveBaseName.get())
            } as FileFilter)

            copy{
                from shadowJar.archiveFile.get()
                into file("$serverDirectoryPath/config/mods")
            }
        }
    }

    // Required if you want to use the Release GitHub action
    task getArtifactPath{
        doLast{ println shadowJar.archiveFile.get().toString() }
    }

    publishing{
        publications{
            create("jitpack", MavenPublication){
                from components.java

                pom{
                    description = metadata.description
                    url = "https://github.com/$metadata.repo"

                    licenses{
                        license{
                            name = "MIT License as Publication"
                            url = "https://www.opensource.org/licenses/mit-license.php"
                        }
                    }

                    developers{
                        developer{
                            id = metadata.author
                        }
                    }
                }
            }
        }
    }
}
