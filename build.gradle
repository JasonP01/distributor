import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
import net.ltgt.gradle.errorprone.CheckSeverity
import java.nio.charset.StandardCharsets

buildscript{
    repositories{
        mavenCentral()
    }

    dependencies{
        classpath "org.codehaus.groovy:groovy-json:3.0.8" // <- For JsonSlurper syntax highlighting
    }

    ext{
        serverDirectoryPath = System.getenv("MINDUSTRY_SERVER_HOME")
        shared = new JsonSlurper().parseText(file("$rootDir/plugin.json").text)

        versions = [
                "mindustry": property("props.mindustry-version"),
                "arc"      : property("props.arc-version"),
                "junit"    : "5.8.2",
                "cloud"    : "1.6.1",
                "owner"    : "1.0.12"
        ]
    }
}

plugins{
    id "net.ltgt.errorprone" version "2.0.2"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "org.checkerframework" version "0.6.7"
}

task runServer{
    doLast{
        javaexec{
            workingDir = serverDirectoryPath
            classpath = files("$serverDirectoryPath/server.jar")
            mainClass = "mindustry.server.ServerLauncher"
            standardInput = System.in
        }
    }
}


allprojects{
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: "net.ltgt.errorprone"
    apply plugin: "com.github.johnrengelman.shadow"

    group property("props.project-group")
    version shared.version + (Boolean.parseBoolean(System.getProperty("release", "false")) ? "" : "-SNAPSHOT")

    repositories{
        mavenCentral()
        maven{ url "https://www.jitpack.io" }
    }

    dependencies{
        // Mindustry
        compileOnly "com.github.Anuken.Arc:arc-core:${versions.arc}"
        compileOnly "com.github.Anuken.Arc:backend-headless:${versions.arc}"
        compileOnly "com.github.Anuken.Mindustry:core:${versions.mindustry}"
        compileOnly "com.github.Anuken.Mindustry:server:${versions.mindustry}"

        // Unit Testing
        testImplementation "com.github.Anuken.Arc:arc-core:${versions.arc}"
        testImplementation "com.github.Anuken.Arc:backend-headless:${versions.arc}"
        testImplementation "com.github.Anuken.Mindustry:core:${versions.mindustry}"
        testImplementation "com.github.Anuken.Mindustry:server:${versions.mindustry}"

        testImplementation "org.junit.jupiter:junit-jupiter-params:${versions.junit}"
        testImplementation "org.junit.jupiter:junit-jupiter-api:${versions.junit}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"

        // Annotations
        compileOnly "org.checkerframework:checker-qual:3.21.1"
        annotationProcessor "com.uber.nullaway:nullaway:0.9.4"
        errorprone "com.google.errorprone:error_prone_core:2.10.0"
        errorproneJavac "com.google.errorprone:javac:9+181-r4173-1"
    }

    java{
        withSourcesJar()
        withJavadocJar()
    }

    test{
        useJUnitPlatform()
    }

    build{
        dependsOn shadowJar
    }

    tasks.withType(JavaCompile).configureEach{
        sourceCompatibility = JavaVersion.VERSION_16
        targetCompatibility = JavaVersion.VERSION_16
        options.encoding = StandardCharsets.UTF_8

        options.errorprone.with{
            disableWarningsInGeneratedCode = true
            disable "MissingSummary"
            if(!name.containsIgnoreCase("test")){
                check("NullAway", CheckSeverity.ERROR)
                option("NullAway:AnnotatedPackages", "fr.xpdustry.distributor")
            }
        }
    }

    checkerFramework {
        checkers = [
                "org.checkerframework.checker.index.IndexChecker"
        ]
    }
}


subprojects{
    ext{
        metadata = new JsonSlurper().parseText(file("$projectDir/plugin.json").text)
    }

    shadowJar{
        def file = new File("${getTemporaryDir().path}/plugin.json")
        file.write(new JsonBuilder(metadata + shared).toPrettyString(), StandardCharsets.UTF_8.name())
        from file
    }

    task moveJar(dependsOn: shadowJar){
        doLast{
            delete file("$serverDirectoryPath/config/mods").listFiles({
                it.isFile() && it.name.endsWith(".jar") && it.name.startsWith((String) shadowJar.archiveBaseName.get())
            } as FileFilter)

            copy{
                from shadowJar.archiveFile.get()
                into file("$serverDirectoryPath/config/mods")
            }
        }
    }

    // Required if you want to use the Release GitHub action
    task getArtifactPath{
        doLast{ println shadowJar.archiveFile.get().toString() }
    }

    // Ugly way to avoid publishing shadow artifacts to maven repos
    // -> https://github.com/johnrengelman/shadow/issues/651
    components.withType(AdhocComponentWithVariants).forEach { c ->
        c.withVariantsFromConfiguration(configurations.shadowRuntimeElements) {skip() }
    }

    publishing{
        publications{
            create("maven", MavenPublication){
                from components.java

                pom{
                    description = metadata.description
                    url = "https://github.com/Xpdustry/Distributor"

                    licenses{
                        license{
                            name = "MIT License as Publication"
                            url = "https://www.opensource.org/licenses/mit-license.php"
                        }
                    }

                    developers{
                        developer{
                            id = "Xpdustry"
                            url = "https://www.xpdustry.fr"
                        }
                    }
                }
            }
        }

        repositories{
            maven{
                name = "xpdustry-repository"
                url = "https://repo.xpdustry.fr/${version.toString().endsWith("-SNAPSHOT") ? "snapshots" : "releases"}"

                credentials {
                    username = System.getenv("XPDUSTRY_MAVEN_NAME") ?: ""
                    password = System.getenv("XPDUSTRY_MAVEN_TOKEN") ?: ""
                }
            }
        }
    }
}
