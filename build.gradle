import groovy.json.JsonSlurper
import groovy.json.JsonBuilder
import java.nio.charset.StandardCharsets
import arc.util.Strings

buildscript{
    ext{
        // Properties
        mindustryVersion = property("props.mindustry-version")
        serverDirectoryPath = System.getenv("MINDUSTRY_SERVER_HOME")
        // Shared plugin.json
        shared = new JsonSlurper().parseText(file("$rootDir/plugin.json").text)
    }

    repositories{
        mavenCentral()
        maven{ url "https://www.jitpack.io" }
    }

    dependencies{
        classpath "org.codehaus.groovy:groovy-json:3.0.8" // <- For JsonSlurper syntax highlighting
        classpath "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    }
}

allprojects{
    apply plugin: "java"
    apply plugin: "maven-publish"

    group property("props.project-group")
    version shared.version

    java{
        withSourcesJar()
        withJavadocJar()
    }

    compileJava{
        sourceCompatibility = JavaVersion.VERSION_16
        targetCompatibility = JavaVersion.VERSION_16
        options.encoding = StandardCharsets.UTF_8
    }

    test{
        useJUnitPlatform()
    }

    compileTestJava{
        options.encoding = StandardCharsets.UTF_8
    }

    repositories{
        mavenCentral()
        maven{ url "https://www.jitpack.io" }
    }

    dependencies{
        // Mindustry
        compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
        compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
        compileOnly "com.github.Anuken.Mindustry:server:$mindustryVersion"

        // Annotations
        compileOnly 'org.jetbrains:annotations:22.0.0'

        // Unit Testing
        testImplementation "com.github.Anuken.Arc:arc-core:$mindustryVersion"
        testImplementation "com.github.Anuken.Mindustry:core:$mindustryVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-params:5.8.1"
        testImplementation "org.junit.jupiter:junit-jupiter-api:5.8.1"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.8.1"
    }
}

subprojects{
    ext{
        // Plugin metadata extracted from plugin.json
        metadata = new JsonSlurper().parseText(file("$projectDir/plugin.json").text)
    }

    jar{
        doFirst{
            def file = new File("${getTemporaryDir().path}/plugin.json")
            file.withWriter{
                it.write(new JsonBuilder(metadata + shared).toPrettyString())
            }

            println file.text

            from file
        }

        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        // archiveBaseName = project.property("props.project-name")

        doLast{
            //The following line is required
            from configurations.runtimeClasspath.collect{
                it.isDirectory() ? it : zipTree(it)
            }
        }
    }

    publishing{
        publications{
            jitpack(MavenPublication){
                from components.java

                pom{
                    // name = metadata.displayName
                    // artifactId = metadata.name
                    // description = metadata.description
                    url = "https://github.com/$shared.repo"

                    licenses{
                        license{
                            name = "MIT License as Publication"
                            url = "https://www.opensource.org/licenses/mit-license.php"
                        }
                    }

                    developers{
                        developer{
                            id = Strings.stripColors(shared.author)
                        }
                    }
                }
            }
        }
    }
}
