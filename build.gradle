import groovy.json.JsonSlurper
import groovy.json.JsonBuilder
import java.nio.charset.StandardCharsets
import arc.util.Strings
import net.ltgt.gradle.errorprone.CheckSeverity


buildscript{
    ext{
        // Properties
        mindustryVersion = property("props.mindustry-version")
        arcVersion = property("props.arc-version")
        serverDirectoryPath = System.getenv("MINDUSTRY_SERVER_HOME")
        // Shared plugin.json
        shared = new JsonSlurper().parseText(file("$rootDir/plugin.json").text)
    }

    repositories{
        mavenCentral()
        gradlePluginPortal()
        maven{ url "https://www.jitpack.io" }
    }

    dependencies{
        classpath "org.codehaus.groovy:groovy-json:3.0.8" // <- For JsonSlurper syntax highlighting
        classpath "com.github.Anuken.Arc:arc-core:$arcVersion"
        classpath "net.ltgt.gradle:gradle-errorprone-plugin:2.0.2"
    }
}

allprojects{
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: "net.ltgt.errorprone"

    group property("props.project-group")
    version shared.version

    java{
        withSourcesJar()
        withJavadocJar()
    }

    test{
        useJUnitPlatform()
    }

    tasks.withType(JavaCompile).configureEach {
        sourceCompatibility = JavaVersion.VERSION_16
        targetCompatibility = JavaVersion.VERSION_16
        options.encoding = StandardCharsets.UTF_8

        options.errorprone.with{
            disableWarningsInGeneratedCode = true
            disable "MissingSummary"
            if(!name.containsIgnoreCase("test")){
                check("NullAway", CheckSeverity.ERROR)
                option("NullAway:AnnotatedPackages", "fr.xpdustry.distributor")
            }
        }
    }

    repositories{
        mavenCentral()
        maven{ url "https://www.jitpack.io" }
    }

    dependencies{
        // Mindustry
        compileOnly "com.github.Anuken.Arc:arc-core:$arcVersion"
        compileOnly "com.github.Anuken.Arc:backend-headless:$arcVersion"
        compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
        compileOnly "com.github.Anuken.Mindustry:server:$mindustryVersion"

        // Unit Testing
        testImplementation "com.github.Anuken.Arc:arc-core:$arcVersion"
        testImplementation "com.github.Anuken.Arc:backend-headless:$arcVersion"
        testImplementation "com.github.Anuken.Mindustry:core:$mindustryVersion"
        testImplementation "com.github.Anuken.Mindustry:server:$mindustryVersion"

        testImplementation "org.junit.jupiter:junit-jupiter-params:5.8.2"
        testImplementation "org.junit.jupiter:junit-jupiter-api:5.8.2"
        testImplementation "org.mockito:mockito-core:4.2.0"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.8.2"

        // Annotations
        compileOnly 'org.checkerframework:checker-qual:3.21.0'
        annotationProcessor "com.uber.nullaway:nullaway:0.9.4"
        errorprone "com.google.errorprone:error_prone_core:2.10.0"
        errorproneJavac "com.google.errorprone:javac:9+181-r4173-1"
    }
}

subprojects{
    ext{
        // Plugin metadata extracted from plugin.json
        metadata = new JsonSlurper().parseText(file("$projectDir/plugin.json").text)
    }

    jar{
        doFirst{
            def file = new File("${getTemporaryDir().path}/plugin.json")
            file.withWriter{
                it.write(new JsonBuilder(metadata + shared).toPrettyString())
            }

            from file
        }

        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    // Required if you want to use the Release GitHub action
    task getArtifactPath{
        doLast{ println jar.archiveFile.get().toString() }
    }

    publishing{
        publications{
            jitpack(MavenPublication){
                from components.java

                pom{
                    name = metadata.displayName
                    description = metadata.description
                    url = "https://github.com/$shared.repo"

                    licenses{
                        license{
                            name = "MIT License as Publication"
                            url = "https://www.opensource.org/licenses/mit-license.php"
                        }
                    }

                    developers{
                        developer{
                            id = Strings.stripColors(shared.author)
                        }
                    }
                }
            }
        }
    }
}

if(serverDirectoryPath != null && file(serverDirectoryPath).exists()){
    task runServer(type: JavaExec){
        workingDir = serverDirectoryPath
        classpath = files("$serverDirectoryPath/server.jar")
        mainClass = "mindustry.server.ServerLauncher"
        standardInput = System.in
    }

    subprojects{
        task moveJar{
            dependsOn jar

            doLast{
                if(!file("$serverDirectoryPath/config").exists()){
                    throw new GradleException("Initialize the server files first.")
                }

                // Deletes all the jar files that begins with the base artifact name
                delete file("$serverDirectoryPath/config/mods").listFiles({
                    it.isFile() && it.name.endsWith(".jar") && it.name.startsWith((String) jar.archiveBaseName.get())
                } as FileFilter)

                copy{
                    from jar.archiveFile.get()
                    into file("$serverDirectoryPath/config/mods")
                }
            }
        }

        task deployJar{
            dependsOn moveJar
            dependsOn runServer
        }
    }
}
